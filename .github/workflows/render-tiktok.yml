name: "Render TikTok Video (auto t√≠tulo desde ENRICH)"

on:
  workflow_dispatch:
    inputs:
      out_name:
        description: "Nombre del archivo de salida"
        required: true
        default: "futurocientifico.mp4"
      text1:
        description: "Texto 1 (branding)"
        required: false
        default: "FuturoCient√≠fico üöÄ Ciencia en 1 minuto"
      text2:
        description: "T√≠tulo (se ignorar√° si hay enriched; usaremos el √∫ltimo)"
        required: false
        default: ""
      text3:
        description: "Texto 3 (CTA)"
        required: false
        default: "#Ciencia #Curiosidades #FuturoCient√≠fico"
      text4:
        description: "Texto 4 (URL / redes)"
        required: false
        default: "IG:@futurocientifico2025 ‚Ä¢ TikTok:@futurocientifico ‚Ä¢ X:@futuro100tico ‚Ä¢ YouTube:@futurocientifico"
      duration:
        description: "Duraci√≥n del v√≠deo (segundos)"
        required: true
        default: "59"

permissions:
  contents: write

env:
  TZ: Europe/Madrid
  IMAGE_PATH: public/avatar-cientifico.png
  # M√∫sica libre (CC0) de FreePD:
  DEFAULT_MUSIC_URL: "https://freepd.com/music/Adventure.mp3"

jobs:
  render:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar ffmpeg, jq y fuentes
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq fonts-dejavu-core

      - name: Verificar imagen fija
        run: |
          set -euo pipefail
          if [ ! -s "$IMAGE_PATH" ]; then
            echo "‚ùå No existe $IMAGE_PATH"
            ls -la public || true
            exit 1
          fi
          echo "‚úÖ Usando imagen: $IMAGE_PATH"

      - name: Obtener SIEMPRE el √∫ltimo t√≠tulo de ENRICH
        id: lasttitle
        run: |
          set -euo pipefail
          FILE="public/articles_enriched.json"
          if [ ! -s "$FILE" ]; then
            echo "‚ùå Falta $FILE. Ejecuta antes el workflow que genera el enriched."
            exit 1
          fi
          echo "Leyendo de: $FILE"
          TITLE=$(jq -r 'sort_by(.published // .date) | reverse | .[0] | (.title_es // .title // "")' "$FILE")
          if [ -z "$TITLE" ] || [ "$TITLE" = "null" ]; then
            echo "‚ùå No se pudo extraer un t√≠tulo v√°lido del enriched"
            exit 1
          fi
          # Guarda en env para los siguientes pasos
          echo "AUTO_TITLE=$TITLE" >> "$GITHUB_ENV"
          echo "T√≠tulo detectado: $TITLE"

      - name: Preparar audio (por defecto FreePD, o archivo local si existe)
        run: |
          set -euo pipefail
          DUR="${{ github.event.inputs.duration }}"
          if [ -s "public/audio/default.mp3" ]; then
            echo "üéµ Usando audio local public/audio/default.mp3"
            IN=public/audio/default.mp3
          else
            echo "üåê Descargando m√∫sica por defecto: $DEFAULT_MUSIC_URL"
            curl -L --fail -o default_music.mp3 "$DEFAULT_MUSIC_URL" || { echo "‚ö†Ô∏è Fall√≥ la descarga, genero silencio"; IN=""; }
            [ -f default_music.mp3 ] && IN=default_music.mp3 || IN=""
          fi
          if [ -z "$IN" ]; then
            echo "üîá Genero audio silencioso ${DUR}s"
            ffmpeg -y -f lavfi -t "$DUR" -i anullsrc=r=44100:cl=stereo -c:a aac -b:a 128k music_in.m4a
          else
            echo "üéöÔ∏è Normalizo a AAC est√©reo 44.1k"
            ffmpeg -y -i "$IN" -vn -ac 2 -ar 44100 -c:a aac -b:a 128k music_in.m4a
          fi

      - name: Crear archivos de texto (usa t√≠tulo auto de ENRICH)
        run: |
          set -euo pipefail
          T1="${{ github.event.inputs.text1 }}"
          T2="${AUTO_TITLE}"  # siempre el de enriched
          T3="${{ github.event.inputs.text3 }}"
          T4="${{ github.event.inputs.text4 }}"
          printf "%s" "$T1" > t1.txt
          printf "%s" "$T2" > t2.txt
          printf "%s" "$T3" > t3.txt
          printf "%s" "$T4" > t4.txt
          echo "‚úîÔ∏è text2 usado: $T2"

      - name: Renderizar v√≠deo 1080x1920 con ffmpeg (letras m√°s peque√±as)
        run: |
          set -euo pipefail
          OUT="${{ github.event.inputs.out_name }}"
          DUR="${{ github.event.inputs.duration }}"

          # ‚Üì‚Üì‚Üì Fuentes m√°s peque√±as que antes
          VF="scale=1080:-2,pad=1080:1920:(ow-iw)/2:(oh-ih)/2,format=yuv420p"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t1.txt:reload=1:fontsize=42:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=10:x=(w-text_w)/2:y=110"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t2.txt:reload=1:fontsize=50:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=10:x=(w-text_w)/2:y=360"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t3.txt:reload=1:fontsize=38:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=10:x=(w-text_w)/2:y=1520"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t4.txt:reload=1:fontsize=32:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=8:x=(w-text_w)/2:y=1700"

          ffmpeg -y -loop 1 -framerate 30 -i "$IMAGE_PATH" -i music_in.m4a \
            -t "$DUR" -filter:v "$VF" -c:v libx264 -pix_fmt yuv420p -profile:v high -preset veryfast -crf 20 \
            -c:a aac -b:a 128k -shortest "$OUT"

          echo "‚úÖ Render listo: $OUT"
          ls -lh "$OUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tiktok-video
          path: ${{ github.workspace }}/${{ github.event.inputs.out_name }}
