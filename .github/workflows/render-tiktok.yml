name: Render TikTok (auto t√≠tulo_es + prompt + cover)

on:
  workflow_dispatch:
    inputs:
      out_name:
        description: Nombre del archivo de salida
        required: true
        default: futurocientifico.mp4
      text1:
        description: Texto 1 (branding)
        required: false
        default: "FuturoCient√≠fico üöÄ Ciencia en 1 minuto"
      text3:
        description: Texto 3 (CTA)
        required: false
        default: "#Ciencia #Curiosidades #FuturoCient√≠fico"
      text4:
        description: Texto 4 (URL / redes)
        required: false
        default: "IG:@futurocientifico2025 ‚Ä¢ TikTok:@futurocientifico ‚Ä¢ X:@futuro100tico ‚Ä¢ YouTube:@futurocientifico"
      duration:
        description: Duraci√≥n del v√≠deo (segundos)
        required: true
        default: "59"

permissions:
  contents: write

env:
  TZ: Europe/Madrid
  IMAGE_PATH: public/avatar-cientifico.png
  DEFAULT_MUSIC_URL: "https://freepd.com/music/Adventure.mp3"
  PROMPT_TEMPLATE_FILE: scripts/prompt-template.txt

jobs:
  render_and_prompt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar ffmpeg, jq, ImageMagick y fuentes
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq imagemagick fonts-dejavu-core

      - name: Preparar rutas y carpeta de salida por fecha
        id: prep
        run: |
          set -euo pipefail
          TODAY="$(date +%F)"
          OUTDIR="media/${TODAY}"
          mkdir -p "${OUTDIR}"
          echo "TODAY=${TODAY}" >> "$GITHUB_ENV"
          echo "OUTDIR=${OUTDIR}" >> "$GITHUB_ENV"
          echo "today=${TODAY}" >> "$GITHUB_OUTPUT"
          echo "outdir=${OUTDIR}" >> "$GITHUB_OUTPUT"

      - name: Verificar enriched e imagen
        run: |
          set -euo pipefail
          test -s public/articles_enriched.json || { echo "‚ùå Falta public/articles_enriched.json"; exit 1; }
          test -s "$IMAGE_PATH" || { echo "‚ùå Falta $IMAGE_PATH"; ls -la public || true; exit 1; }

      - name: Obtener √∫ltimo art√≠culo y su title_es (obligatorio)
        id: pick
        run: |
          set -euo pipefail
          FILE="public/articles_enriched.json"
          SEL="$(jq -c 'sort_by(.published // .date) | reverse | .[0]' "$FILE")"
          TITLE_ES="$(printf '%s' "$SEL" | jq -r '(.title_es // "")')"
          SOURCE="$(printf '%s' "$SEL" | jq -r '(.source // "")')"
          PUBL="$(printf '%s' "$SEL" | jq -r '(.published // .date // "")')"
          DATE="${PUBL%%T*}"
          URL="$(printf '%s' "$SEL" | jq -r '(.url // "")')"
          if [ -z "$TITLE_ES" ] || [ "$TITLE_ES" = "null" ]; then
            echo "‚ùå El √∫ltimo art√≠culo no tiene title_es. Corrige/enriquece primero."
            exit 1
          fi
          {
            echo "AUTO_TITLE_ES=$TITLE_ES"
            echo "AUTO_SOURCE=$SOURCE"
            echo "AUTO_DATE=$DATE"
            echo "AUTO_URL=$URL"
          } >> "$GITHUB_ENV"

      - name: Preparar audio (local si existe; si no, FreePD; si falla, silencio)
        run: |
          set -euo pipefail
          DUR="${{ github.event.inputs.duration }}"
          IN=""
          if [ -s "public/audio/default.mp3" ]; then
            IN="public/audio/default.mp3"
          else
            if curl -L --fail -o default_music.mp3 "${DEFAULT_MUSIC_URL}"; then
              IN="default_music.mp3"
            fi
          fi
          if [ -z "$IN" ]; then
            ffmpeg -y -f lavfi -t "$DUR" -i anullsrc=r=44100:cl=stereo -c:a aac -b:a 128k music_in.m4a
          else
            ffmpeg -y -i "$IN" -vn -ac 2 -ar 44100 -c:a aac -b:a 128k music_in.m4a
          fi

      - name: Crear archivos de texto (branding, title_es, CTA, redes)
        run: |
          set -euo pipefail
          printf "%s" "${{ github.event.inputs.text1 }}" > t1.txt
          printf "%s" "${AUTO_TITLE_ES}" > t2.txt
          printf "%s" "${{ github.event.inputs.text3 }}" > t3.txt
          printf "%s" "${{ github.event.inputs.text4 }}" > t4.txt

      - name: Renderizar v√≠deo 1080x1920 (letras m√°s peque√±as)
        run: |
          set -euo pipefail
          OUT="${{ github.event.inputs.out_name }}"
          DUR="${{ github.event.inputs.duration }}"
          VF="scale=1080:-2,pad=1080:1920:(ow-iw)/2:(oh-ih)/2,format=yuv420p"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t1.txt:reload=1:fontsize=42:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=10:x=(w-text_w)/2:y=110"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t2.txt:reload=1:fontsize=50:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=10:x=(w-text_w)/2:y=360"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t3.txt:reload=1:fontsize=38:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=10:x=(w-text_w)/2:y=1520"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t4.txt:reload=1:fontsize=32:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=8:x=(w-text_w)/2:y=1700"
          ffmpeg -y -loop 1 -framerate 30 -i "$IMAGE_PATH" -i music_in.m4a -t "$DUR" -filter:v "$VF" -c:v libx264 -pix_fmt yuv420p -profile:v high -preset veryfast -crf 20 -c:a aac -b:a 128k -shortest "$OUT"
          mv "$OUT" "$OUTDIR/$OUT"

      - name: Generar imagen de portada (cover.png) con los mismos textos
        run: |
          set -euo pipefail
          VF="scale=1080:-2,pad=1080:1920:(ow-iw)/2:(oh-ih)/2,format=rgba"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t1.txt:reload=1:fontsize=42:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=10:x=(w-text_w)/2:y=110"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t2.txt:reload=1:fontsize=50:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=10:x=(w-text_w)/2:y=360"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t3.txt:reload=1:fontsize=38:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=10:x=(w-text_w)/2:y=1520"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t4.txt:reload=1:fontsize=32:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=8:x=(w-text_w)/2:y=1700"
          ffmpeg -y -loop 1 -i "$IMAGE_PATH" -frames:v 1 -filter:v "$VF" cover.png
          mv cover.png "$OUTDIR/cover.png"

      - name: Construir prompt (plantilla en archivo o fallback sin here-doc)
        run: |
          set -euo pipefail
          if [ -s "$PROMPT_TEMPLATE_FILE" ]; then
            cp "$PROMPT_TEMPLATE_FILE" prompt.tpl
          else
            printf "%s\n" \
"Ilustraci√≥n cient√≠fica minimalista y moderna sobre: \"{{title_es}}\"." \
"Requisitos:" \
"- Estilo: vector flat, limpio, accesible, alto contraste; colores amigables WCAG." \
"- Nada de texto ni logotipos, sin marcas reales; composici√≥n clara y sin saturaci√≥n." \
"- Fondo claro y formas geom√©tricas abstractas sutiles." \
"- Enfoque divulgativo, t√©cnico pero atractivo, sin realismo fotogr√°fico." \
"- Orientaci√≥n cuadrada o 4:5; dejar margen de seguridad." \
"Contexto (no dibujar texto, solo orientar la escena):" \
"- Fuente: {{source}} | Fecha: {{date}} | URL: {{url}}" \
> prompt.tpl
          fi
          esc() { printf '%s' "$1" | sed -e 's/[\/&|]/\\&/g'; }
          T_ESC="$(esc "${AUTO_TITLE_ES}")"
          S_ESC="$(esc "${AUTO_SOURCE}")"
          D_ESC="$(esc "${AUTO_DATE}")"
          U_ESC="$(esc "${AUTO_URL}")"
          sed -e "s|{{title_es}}|$T_ESC|g" \
              -e "s|{{source}}|$S_ESC|g" \
              -e "s|{{date}}|$D_ESC|g" \
              -e "s|{{url}}|$U_ESC|g" \
              prompt.tpl > "$OUTDIR/prompt.txt"

      - name: Subir v√≠deo como artifact
        uses: actions/upload-artifact@v4
        with:
          name: tiktok-video
          path: ${{ env.OUTDIR }}/*.mp4

      - name: Commit & push media del d√≠a (v√≠deo + cover + prompt)
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${OUTDIR}"
          git commit -m "chore: TikTok + cover + prompt (${TODAY}) [skip ci]" || echo "No changes"
          git fetch origin main
          git pull --rebase origin main || true
          git push || (git pull --rebase origin main && git push)
