name: Render TikTok (centrado, chip y título destacado)

on:
  workflow_dispatch:
    inputs:
      out_name:
        description: Nombre del archivo de salida
        required: true
        default: futurocientifico.mp4
      text1:
        description: Texto 1 (branding)
        required: false
        default: "FuturoCientífico · Ciencia en 1 minuto"
      text3:
        description: Texto 3 (CTA)
        required: false
        default: "#Ciencia #Curiosidades #FuturoCientífico"
      text4:
        description: "Redes (separadas por ' · ')"
        required: false
        default: "IG:@futurocientifico2025 · TikTok:@futurocientifico · X:@futuro100tico · YouTube:@futurocientifico"
      duration:
        description: Duración del vídeo (segundos)
        required: true
        default: "59"
      title_style:
        description: "Plantilla del título: strip | card | glow"
        required: false
        default: "strip"

permissions:
  contents: write

env:
  TZ: Europe/Madrid
  IMAGE_PATH: public/avatar-cientifico.png
  DEFAULT_MUSIC_URL: "https://freepd.com/music/Adventure.mp3"
  PROMPT_TEMPLATE_FILE: scripts/prompt-template.txt

jobs:
  render:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar ffmpeg, jq e ImageMagick (fuentes)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq imagemagick fonts-dejavu-core

      - name: Preparar carpeta por fecha
        run: |
          set -euo pipefail
          TODAY="$(date +%F)"
          OUTDIR="media/${TODAY}"
          mkdir -p "${OUTDIR}"
          echo "TODAY=${TODAY}" >> "$GITHUB_ENV"
          echo "OUTDIR=${OUTDIR}" >> "$GITHUB_ENV"

      - name: Verificar enriched e imagen
        run: |
          set -euo pipefail
          test -s public/articles_enriched.json || { echo "Falta public/articles_enriched.json"; exit 1; }
          test -s "$IMAGE_PATH" || { echo "Falta $IMAGE_PATH"; exit 1; }

      - name: Elegir último artículo y preparar textos (wrap + tamaño + redes 2 líneas + chip)
        id: pick
        run: |
          set -euo pipefail
          FILE="public/articles_enriched.json"
          SEL="$(jq -c 'sort_by(.published // .date) | reverse | .[0]' "$FILE")"
          TITLE_ES="$(printf '%s' "$SEL" | jq -r '(.title_es // "")')"
          SOURCE="$(printf '%s' "$SEL" | jq -r '(.source // "")')"
          PUBL="$(printf '%s' "$SEL" | jq -r '(.published // .date // "")')"
          DATE="${PUBL%%T*}"
          URL="$(printf '%s' "$SEL" | jq -r '(.url // "")')"

          [ -n "$TITLE_ES" ] && [ "$TITLE_ES" != "null" ] || { echo "El último artículo no tiene title_es"; exit 1; }

          {
            echo "AUTO_TITLE_ES=$TITLE_ES"
            echo "AUTO_SOURCE=$SOURCE"
            echo "AUTO_DATE=$DATE"
            echo "AUTO_URL=$URL"
          } >> "$GITHUB_ENV"

          # Tamaño/ajuste del título
          LEN=$(printf "%s" "$TITLE_ES" | wc -m | awk '{print $1}')
          if   [ "$LEN" -le 60  ]; then FONT_T2=38; WRAP=28
          elif [ "$LEN" -le 100 ]; then FONT_T2=32; WRAP=24
          elif [ "$LEN" -le 140 ]; then FONT_T2=28; WRAP=20
          else                         FONT_T2=24; WRAP=18
          fi
          echo "FONT_T2=${FONT_T2}" >> "$GITHUB_ENV"

          # Versión para COVER (más grande, con tope)
          COVER_T2=$((FONT_T2 + 6))
          if [ "$COVER_T2" -gt 48 ]; then COVER_T2=48; fi
          echo "FONT_T2_COVER=${COVER_T2}" >> "$GITHUB_ENV"

          # Textos base
          printf "%s" "${{ github.event.inputs.text1 }}" > t1.txt
          printf "%s" "$TITLE_ES" | fold -s -w ${WRAP} > t2.txt
          printf "%s" "${{ github.event.inputs.text3 }}" > t3.txt

          # Redes en dos líneas
          T4_IN="${{ github.event.inputs.text4 }}"
          printf "%s\n" "$T4_IN" | awk -F "·" '{
            n=split($0,a,"·");
            mid=int((n+1)/2);
            for(i=1;i<=mid;i++){gsub(/^ +| +$/,"",a[i]); printf "%s%s", a[i], (i<mid?" · ":"")}
            print "";
            for(i=mid+1;i<=n;i++){gsub(/^ +| +$/,"",a[i]); printf "%s%s", a[i], (i<n?" · ":"")}
            print "";
          }' > t4_split.txt
          sed -n '1p' t4_split.txt > t4a.txt
          sed -n '2p' t4_split.txt > t4b.txt

          # Chip fijo (gancho)
          echo "Hoy en #FuturoCientífico" > t2chip.txt

          # Estilo
          STYLE="${{ github.event.inputs.title_style }}"
          case "$STYLE" in
            strip|card|glow) echo "TITLE_STYLE=$STYLE" >> "$GITHUB_ENV" ;;
            *) echo "TITLE_STYLE=strip" >> "$GITHUB_ENV" ;;
          esac

      - name: Preparar audio
        run: |
          set -euo pipefail
          DUR="${{ github.event.inputs.duration }}"
          IN=""
          if [ -s "public/audio/default.mp3" ]; then
            IN="public/audio/default.mp3"
          else
            if curl -L --fail -o default_music.mp3 "${DEFAULT_MUSIC_URL}"; then
              IN="default_music.mp3"
            fi
          fi
          if [ -z "$IN" ]; then
            ffmpeg -y -f lavfi -t "$DUR" -i anullsrc=r=44100:cl=stereo -c:a aac -b:a 128k music_in.m4a
          else
            ffmpeg -y -i "$IN" -vn -ac 2 -ar 44100 -c:a aac -b:a 128k -filter:a "volume=0.9" music_in.m4a
          fi

      - name: 🎬 Renderizar vídeo (sin bandas · sin rellenos · chip=title ancho igual)
        run: |
          set -euo pipefail
          OUT="${{ github.event.inputs.out_name }}"
          DUR="${{ github.event.inputs.duration }}"
          FONT="/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
          FONT_BOLD="/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"

          # Asegurar textos básicos
          [ -s t1.txt ] || { echo "Falta t1.txt"; exit 1; }
          [ -s t2.txt ] || { echo "Falta t2.txt (title_es envuelto)"; exit 1; }
          [ -s t3.txt ] || { echo "Falta t3.txt"; exit 1; }
          [ -s t4a.txt ] || echo "" > t4a.txt
          [ -s t4b.txt ] || echo "" > t4b.txt
          [ -s t2chip_text.txt ] || echo "Hoy en #FuturoCientífico" > t2chip_text.txt

          CHIP_PT="${FONT_CHIP_TEXT:-72}"
          TITLE_PT="${FONT_T2_COVER:-96}"

          # Leer textos y ESCAPAR para ImageMagick (sin usar @archivo)
          CHIP_TEXT="$(tr -d '\r' < t2chip_text.txt)"
          CHIP_ESC="$(printf "%s" "$CHIP_TEXT" | sed 's/\\/\\\\/g; s/"/\\"/g')"

          TITLE_TEXT="$(cat t2.txt)"
          TITLE_ESC="$(printf "%s" "$TITLE_TEXT" | sed ':a;N;$!ba;s/\\/\\\\/g; s/"/\\"/g; s/\n/\\n/g')"

          # PNG del chip (ancho natural del texto del gancho)
          convert -background none -fill white -stroke black -strokewidth 7 \
                  -font "$FONT_BOLD" -pointsize "$CHIP_PT" \
                  label:"$CHIP_ESC" chip_label.png

          CHIP_W="$(identify -format "%w" chip_label.png)"

          # PNG del título ajustado EXACTO al ancho del chip (envuelve automáticamente)
          convert -background none -fill white -stroke black -strokewidth 8 \
                  -font "$FONT_BOLD" -pointsize "$TITLE_PT" \
                  -size "${CHIP_W}x" caption:"$TITLE_ESC" title_label.png

          ffmpeg -y -loop 1 -framerate 30 -i "$IMAGE_PATH" \
                 -i chip_label.png -i title_label.png -i music_in.m4a -t "$DUR" \
                 -filter_complex "\
          [0:v]scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920,format=yuv420p[bg]; \
          [bg][1:v]overlay=x='(main_w-overlay_w)/2':y='(main_h/2-380)'[bg1]; \
          [bg1][2:v]overlay=x='(main_w-overlay_w)/2':y='(main_h-overlay_h)/2'[bg2]; \
          [bg2]drawtext=fontfile=${FONT}:textfile=t1.txt:reload=1:text_shaping=1:fontsize=${FONT_T1_COVER:-52}:fontcolor=white:borderw=3:bordercolor=black@1.0:shadowcolor=black@0.85:shadowx=2:shadowy=2:x=(w-text_w)/2:y=70[bg3]; \
          [bg3]drawtext=fontfile=${FONT}:textfile=t3.txt:reload=1:text_shaping=1:fontsize=${FONT_T3_COVER:-40}:fontcolor=white:borderw=3:bordercolor=black@1.0:shadowcolor=black@0.85:shadowx=2:shadowy=2:x=(w-text_w)/2:y=1440[bg4]; \
          [bg4]drawtext=fontfile=${FONT}:textfile=t4a.txt:reload=1:text_shaping=1:fontsize=${FONT_T4_COVER:-38}:fontcolor=white:borderw=3:bordercolor=black@1.0:shadowcolor=black@0.85:shadowx=2:shadowy=2:x=(w-text_w)/2:y=1600[bg5]; \
          [bg5]drawtext=fontfile=${FONT}:textfile=t4b.txt:reload=1:text_shaping=1:fontsize=${FONT_T4_COVER:-38}:fontcolor=white:borderw=3:bordercolor=black@1.0:shadowcolor=black@0.85:shadowx=2:shadowy=2:x=(w-text_w)/2:y=1700" \
                 -c:v libx264 -pix_fmt yuv420p -profile:v high -preset veryfast -crf 23 \
                 -c:a aac -b:a 128k -shortest "$OUT"

          mv "$OUT" "$OUTDIR/$OUT"

      - name: 🖼️ Generar cover.png (sin bandas · sin rellenos · chip=title ancho igual)
        run: |
          set -euo pipefail
          FONT="/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
          FONT_BOLD="/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"

          # Asegurar textos
          [ -s t1.txt ] || { echo "Falta t1.txt"; exit 1; }
          [ -s t2.txt ] || { echo "Falta t2.txt (title_es envuelto)"; exit 1; }
          [ -s t3.txt ] || { echo "Falta t3.txt"; exit 1; }
          [ -s t4a.txt ] || echo "" > t4a.txt
          [ -s t4b.txt ] || echo "" > t4b.txt
          [ -s t2chip_text.txt ] || echo "Hoy en #FuturoCientífico" > t2chip_text.txt

          CHIP_PT="${FONT_CHIP_TEXT:-72}"
          TITLE_PT="${FONT_T2_COVER:-96}"

          # Leer textos y ESCAPAR (evita policy de IM)
          CHIP_TEXT="$(tr -d '\r' < t2chip_text.txt)"
          CHIP_ESC="$(printf "%s" "$CHIP_TEXT" | sed 's/\\/\\\\/g; s/"/\\"/g')"

          TITLE_TEXT="$(cat t2.txt)"
          TITLE_ESC="$(printf "%s" "$TITLE_TEXT" | sed ':a;N;$!ba;s/\\/\\\\/g; s/"/\\"/g; s/\n/\\n/g')"

          # PNG del chip
          convert -background none -fill white -stroke black -strokewidth 7 \
                  -font "$FONT_BOLD" -pointsize "$CHIP_PT" \
                  label:"$CHIP_ESC" chip_label.png

          CHIP_W="$(identify -format "%w" chip_label.png)"

          # PNG del título con el MISMO ancho
          convert -background none -fill white -stroke black -strokewidth 8 \
                  -font "$FONT_BOLD" -pointsize "$TITLE_PT" \
                  -size "${CHIP_W}x" caption:"$TITLE_ESC" title_label.png

          ffmpeg -y -loop 1 -i "$IMAGE_PATH" -frames:v 1 \
                 -i chip_label.png -i title_label.png \
                 -filter_complex "\
          [0:v]scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920,format=rgba[bg]; \
          [bg][1:v]overlay=x='(main_w-overlay_w)/2':y='(main_h/2-380)'[bg1]; \
          [bg1][2:v]overlay=x='(main_w-overlay_w)/2':y='(main_h-overlay_h)/2'[bg2]; \
          [bg2]drawtext=fontfile=${FONT}:textfile=t1.txt:reload=1:text_shaping=1:fontsize=${FONT_T1_COVER:-52}:fontcolor=white:borderw=3:bordercolor=black@1.0:shadowcolor=black@0.85:shadowx=2:shadowy=2:x=(w-text_w)/2:y=70[bg3]; \
          [bg3]drawtext=fontfile=${FONT}:textfile=t3.txt:reload=1:text_shaping=1:fontsize=${FONT_T3_COVER:-40}:fontcolor=white:borderw=3:bordercolor=black@1.0:shadowcolor=black@0.85:shadowx=2:shadowy=2:x=(w-text_w)/2:y=1440[bg4]; \
          [bg4]drawtext=fontfile=${FONT}:textfile=t4a.txt:reload=1:text_shaping=1:fontsize=${FONT_T4_COVER:-38}:fontcolor=white:borderw=3:bordercolor=black@1.0:shadowcolor=black@0.85:shadowx=2:shadowy=2:x=(w-text_w)/2:y=1600[bg5]; \
          [bg5]drawtext=fontfile=${FONT}:textfile=t4b.txt:reload=1:text_shaping=1:fontsize=${FONT_T4_COVER:-38}:fontcolor=white:borderw=3:bordercolor=black@1.0:shadowcolor=black@0.85:shadowx=2:shadowy=2:x=(w-text_w)/2:y=1700" \
                 cover.png

          mkdir -p "$OUTDIR"
          mv cover.png "$OUTDIR/cover.png"

      - name: Construir prompt y textos IG/X
        uses: actions/github-script@v7
        env:
          OUTDIR: ${{ env.OUTDIR }}
          PROMPT_TEMPLATE_FILE: ${{ env.PROMPT_TEMPLATE_FILE }}
          AUTO_TITLE_ES: ${{ env.AUTO_TITLE_ES }}
          AUTO_SOURCE: ${{ env.AUTO_SOURCE }}
          AUTO_DATE: ${{ env.AUTO_DATE }}
          AUTO_URL: ${{ env.AUTO_URL }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const outdir = process.env.OUTDIR;

            // Prompt
            const tplFile = process.env.PROMPT_TEMPLATE_FILE;
            let template;
            if (tplFile && fs.existsSync(tplFile)) {
              template = fs.readFileSync(tplFile, 'utf8');
            } else {
              template =
                'Ilustración científica minimalista y moderna sobre: "{{title_es}}".\n' +
                'Estilo: vector flat, accesible, alto contraste; sin texto ni logos.\n' +
                'Contexto (no dibujar texto): Fuente {{source}} · Fecha {{date}} · URL {{url}}\n';
            }
            const map = {
              '{{title_es}}': process.env.AUTO_TITLE_ES || '',
              '{{source}}': process.env.AUTO_SOURCE || '',
              '{{date}}': process.env.AUTO_DATE || '',
              '{{url}}': process.env.AUTO_URL || '',
            };
            let prompt = template;
            for (const [k,v] of Object.entries(map)) prompt = prompt.split(k).join(v);
            fs.writeFileSync(path.join(outdir, 'prompt.txt'), prompt);

            // Instagram
            const ig = [
              '🧠 Nueva cápsula de #FuturoCientífico',
              '',
              `Este artículo trata sobre "${process.env.AUTO_TITLE_ES}". Se exploran los aspectos clave relacionados con la ciencia actual.`,
              '🔍 ¿Te imaginabas esto?',
              '',
              '🌐https://futurocientifico.vercel.app/revistas',
              '#Ciencia #Educación #Descubre #Curiosidades'
            ].join('\n');
            fs.writeFileSync(path.join(outdir, 'instagram.txt'), ig);

            // X
            const x = [
              '🧠 Hoy en #FuturoCientífico:',
              '',
              `«Este artículo trata sobre "${process.env.AUTO_TITLE_ES}". Se exploran los aspectos clave relacionados con la ciencia actual.»`,
              '🌐https://futurocientifico.vercel.app/revistas',
              '#Ciencia #Curiosidades #Educación'
            ].join('\n');
            fs.writeFileSync(path.join(outdir, 'x.txt'), x);

      - name: Subir artefactos
        uses: actions/upload-artifact@v4
        with:
          name: tiktok-media
          path: ${{ env.OUTDIR }}/*

      - name: Commit & push media del día
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${OUTDIR}"
          git commit -m "chore: TikTok media ${TODAY} [skip ci]" || echo "No changes"
          git fetch origin main
          git pull --rebase origin main || true
          git push || (git pull --rebase origin main && git push)

