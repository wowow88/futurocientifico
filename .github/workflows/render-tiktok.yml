name: "Render TikTok Video"

on:
  workflow_dispatch:
    inputs:
      out_name:
        description: "Nombre del archivo de salida"
        required: true
        default: "futurocientifico.mp4"
      text1:
        description: "Texto 1 (branding)"
        required: true
        default: "FuturoCient√≠fico üöÄ Ciencia en 1 minuto"
      text2:
        description: "Texto 2 (principal)"
        required: false
        default: "Un dato cient√≠fico al d√≠a"
      text3:
        description: "Texto 3 (CTA)"
        required: false
        default: "S√≠guenos @futurocientifico"
      text4:
        description: "Texto 4 (URL)"
        required: false
        default: "futurocientifico.vercel.app"
      music_url:
        description: "URL de m√∫sica (opcional, MP3/M4A)"
        required: false
        default: ""
      duration:
        description: "Duraci√≥n del v√≠deo (segundos)"
        required: true
        default: "59"

permissions:
  contents: write

env:
  TZ: Europe/Madrid
  # Imagen FIJA para TikTok
  IMAGE_PATH: public/avatar-cientifico.png

jobs:
  render:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar ffmpeg y fuente
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Verificar imagen fija
        run: |
          set -euo pipefail
          if [ ! -s "$IMAGE_PATH" ]; then
            echo "‚ùå No existe $IMAGE_PATH"
            echo "Contenido de public/:"
            ls -la public || true
            exit 1
          fi
          echo "‚úÖ Usando imagen: $IMAGE_PATH"

      - name: Preparar audio (descargar o generar silencio)
        run: |
          set -euo pipefail
          DUR="${{ github.event.inputs.duration }}"
          MUSIC_URL="${{ github.event.inputs.music_url }}"
          if [ -n "$MUSIC_URL" ]; then
            echo "üîä Descargando m√∫sica: $MUSIC_URL"
            curl -L --fail -o music_in  "$MUSIC_URL" || { echo "‚ö†Ô∏è No se pudo descargar m√∫sica. Generando silencio..."; MUSIC_URL=""; }
          fi

          if [ -z "$MUSIC_URL" ]; then
            echo "üéöÔ∏è Generando audio silencioso ${DUR}s"
            ffmpeg -y -f lavfi -t "$DUR" -i anullsrc=r=44100:cl=stereo -c:a aac -b:a 128k music_in.m4a
          fi

          # Normalizamos a AAC est√©reo 44.1k
          if [ ! -f music_in.m4a ]; then
            ffmpeg -y -i music_in -vn -ac 2 -ar 44100 -c:a aac -b:a 128k music_in.m4a
          fi

      - name: Crear archivos de texto (evita problemas de escapado)
        run: |
          set -euo pipefail
          printf "%s" "${{ github.event.inputs.text1 }}" > t1.txt
          printf "%s" "${{ github.event.inputs.text2 }}" > t2.txt
          printf "%s" "${{ github.event.inputs.text3 }}" > t3.txt
          printf "%s" "${{ github.event.inputs.text4 }}" > t4.txt

      - name: Renderizar v√≠deo 1080x1920 con ffmpeg
        run: |
          set -euo pipefail
          OUT="${{ github.event.inputs.out_name }}"
          DUR="${{ github.event.inputs.duration }}"

          # Filtro de video: escala a 1080 de ancho, rellena alto a 1920, y superpone 4 textos
          VF="scale=1080:-2,pad=1080:1920:(ow-iw)/2:(oh-ih)/2,format=yuv420p"
          # drawtext: usa familia DejaVu Sans (instalada por el paquete fonts-dejavu-core)
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t1.txt:reload=1:fontsize=56:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=12:x=(w-text_w)/2:y=120"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t2.txt:reload=1:fontsize=64:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=12:x=(w-text_w)/2:y=360"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t3.txt:reload=1:fontsize=52:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=12:x=(w-text_w)/2:y=1520"
          VF="$VF,drawtext=font='DejaVu Sans':textfile=t4.txt:reload=1:fontsize=40:fontcolor=white:box=1:boxcolor=0x00000088:boxborderw=10:x=(w-text_w)/2:y=1700"

          # Creamos el v√≠deo a partir de una imagen fija (-loop 1) + audio normalizado
          ffmpeg -y -loop 1 -framerate 30 -i "$IMAGE_PATH" -i music_in.m4a \
            -t "$DUR" -filter:v "$VF" -c:v libx264 -pix_fmt yuv420p -profile:v high -preset veryfast -crf 20 \
            -c:a aac -b:a 128k -shortest "$OUT"

          echo "‚úÖ Render listo: $OUT"
          ls -lh "$OUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: video
          path: ${{ github.workspace }}/${{ github.event.inputs.out_name }}

      # (Opcional) Publicar en un Release para URL directa
      - name: Create Release
        if: always()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: auto-video-${{ github.run_id }}
          name: Auto Video ${{ github.run_id }}
          draft: false
          prerelease: false
          files: ${{ github.workspace }}/${{ github.event.inputs.out_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
