name: Render TikTok (title_es + cover + IG/X)

on:
  workflow_dispatch:
    inputs:
      out_name:
        description: Nombre del archivo de salida
        required: true
        default: futurocientifico.mp4
      text1:
        description: Texto 1 (branding)
        required: false
        default: "FuturoCient√≠fico ¬∑ Ciencia en 1 minuto"
      text3:
        description: Texto 3 (CTA)
        required: false
        default: "#Ciencia #Curiosidades #FuturoCient√≠fico"
      text4:
        description: Texto 4 (redes)
        required: false
        default: "IG:@futurocientifico2025 ¬∑ TikTok:@futurocientifico ¬∑ X:@futuro100tico ¬∑ YouTube:@futurocientifico"
      duration:
        description: Duraci√≥n del v√≠deo (segundos)
        required: true
        default: "59"

permissions:
  contents: write

env:
  TZ: Europe/Madrid
  IMAGE_PATH: public/avatar-cientifico.png
  DEFAULT_MUSIC_URL: "https://freepd.com/music/Adventure.mp3"
  PROMPT_TEMPLATE_FILE: scripts/prompt-template.txt

jobs:
  render:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar ffmpeg, jq e ImageMagick (fuentes incluidas)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq imagemagick fonts-dejavu-core

      - name: Preparar carpeta por fecha
        run: |
          set -euo pipefail
          TODAY="$(date +%F)"
          OUTDIR="media/${TODAY}"
          mkdir -p "${OUTDIR}"
          echo "TODAY=${TODAY}" >> "$GITHUB_ENV"
          echo "OUTDIR=${OUTDIR}" >> "$GITHUB_ENV"

      - name: Verificar enriched e imagen
        run: |
          set -euo pipefail
          test -s public/articles_enriched.json || { echo "Falta public/articles_enriched.json"; exit 1; }
          test -s "$IMAGE_PATH" || { echo "Falta $IMAGE_PATH"; exit 1; }

      - name: Elegir √∫ltimo art√≠culo y preparar textos (wrap + tama√±o din√°mico)
        id: pick
        run: |
          set -euo pipefail
          FILE="public/articles_enriched.json"
          SEL="$(jq -c 'sort_by(.published // .date) | reverse | .[0]' "$FILE")"
          TITLE_ES="$(printf '%s' "$SEL" | jq -r '(.title_es // "")')"
          SOURCE="$(printf '%s' "$SEL" | jq -r '(.source // "")')"
          PUBL="$(printf '%s' "$SEL" | jq -r '(.published // .date // "")')"
          DATE="${PUBL%%T*}"
          URL="$(printf '%s' "$SEL" | jq -r '(.url // "")')"

          if [ -z "$TITLE_ES" ] || [ "$TITLE_ES" = "null" ]; then
            echo "El √∫ltimo art√≠culo no tiene title_es"; exit 1
          fi

          # Guardar variables globales
          {
            echo "AUTO_TITLE_ES=$TITLE_ES"
            echo "AUTO_SOURCE=$SOURCE"
            echo "AUTO_DATE=$DATE"
            echo "AUTO_URL=$URL"
          } >> "$GITHUB_ENV"

          # ---- Ajuste autom√°tico para que quepa en 1080x1920 ----
          # Longitud de t√≠tulo -> tama√±o de fuente y ancho de plegado (aprox.)
          LEN=$(printf "%s" "$TITLE_ES" | wc -m | awk '{print $1}')
          if [ "$LEN" -le 60 ]; then
            FONT_T2=40; WRAP=28
          elif [ "$LEN" -le 100 ]; then
            FONT_T2=34; WRAP=24
          else
            FONT_T2=28; WRAP=20
          fi

          # Escribir t1..t4 y plegar t2 (aqu√≠ reducimos tama√±o visual)
          printf "%s" "${{ github.event.inputs.text1 }}" > t1.txt
          printf "%s" "$TITLE_ES" | fold -s -w ${WRAP} > t2.txt
          printf "%s" "${{ github.event.inputs.text3 }}" > t3.txt
          printf "%s" "${{ github.event.inputs.text4 }}" > t4.txt

          # Exportar el tama√±o calculado para ffmpeg
          echo "FONT_T2=${FONT_T2}" >> "$GITHUB_ENV"

      - name: Preparar audio (local ‚Üí FreePD ‚Üí silencio)
        run: |
          set -euo pipefail
          DUR="${{ github.event.inputs.duration }}"
          IN=""
          if [ -s "public/audio/default.mp3" ]; then
            IN="public/audio/default.mp3"
          else
            if curl -L --fail -o default_music.mp3 "${DEFAULT_MUSIC_URL}"; then
              IN="default_music.mp3"
            fi
          fi
          if [ -z "$IN" ]; then
            ffmpeg -y -f lavfi -t "$DUR" -i anullsrc=r=44100:cl=stereo -c:a aac -b:a 128k music_in.m4a
          else
            ffmpeg -y -i "$IN" -vn -ac 2 -ar 44100 -c:a aac -b:a 128k -filter:a "volume=0.9" music_in.m4a
          fi

      - name: Renderizar v√≠deo 1080x1920 (tipograf√≠as m√°s peque√±as)
        run: |
          set -euo pipefail
          OUT="${{ github.event.inputs.out_name }}"
          DUR="${{ github.event.inputs.duration }}"
          FONT="/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"

          # Capas: fondo est√°tico + t1 (28px) + t2 env (28‚Äì40px) + t3 (28px) + t4 (24px)
          VF="scale=1080:-2,pad=1080:1920:(ow-iw)/2:(oh-ih)/2,format=yuv420p"
          VF="$VF,drawtext=fontfile=${FONT}:textfile=t1.txt:reload=1:text_shaping=1:fontsize=28:fontcolor=white:box=1:boxcolor=0x000000AA:boxborderw=10:x=(w-text_w)/2:y=110"
          VF="$VF,drawtext=fontfile=${FONT}:textfile=t2.txt:reload=1:text_shaping=1:fontsize=${FONT_T2}:fontcolor=white:box=1:boxcolor=0x000000AA:boxborderw=10:line_spacing=8:x=(w-text_w)/2:y=400"
          VF="$VF,drawtext=fontfile=${FONT}:textfile=t3.txt:reload=1:text_shaping=1:fontsize=28:fontcolor=white:box=1:boxcolor=0x000000AA:boxborderw=10:x=(w-text_w)/2:y=1520"
          VF="$VF,drawtext=fontfile=${FONT}:textfile=t4.txt:reload=1:text_shaping=1:fontsize=24:fontcolor=white:box=1:boxcolor=0x000000AA:boxborderw=8:x=(w-text_w)/2:y=1700"

          ffmpeg -y -loop 1 -framerate 30 -i "$IMAGE_PATH" -i music_in.m4a -t "$DUR" \
            -filter:v "$VF" -c:v libx264 -pix_fmt yuv420p -profile:v high -preset veryfast -crf 23 \
            -c:a aac -b:a 128k -shortest "$OUT"

          mv "$OUT" "$OUTDIR/$OUT"

      - name: Generar cover.png (mismo estilo/medidas)
        run: |
          set -euo pipefail
          FONT="/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
          VF="scale=1080:-2,pad=1080:1920:(ow-iw)/2:(oh-ih)/2,format=rgba"
          VF="$VF,drawtext=fontfile=${FONT}:textfile=t1.txt:reload=1:text_shaping=1:fontsize=28:fontcolor=white:box=1:boxcolor=0x000000AA:boxborderw=10:x=(w-text_w)/2:y=110"
          VF="$VF,drawtext=fontfile=${FONT}:textfile=t2.txt:reload=1:text_shaping=1:fontsize=${FONT_T2}:fontcolor=white:box=1:boxcolor=0x000000AA:boxborderw=10:line_spacing=8:x=(w-text_w)/2:y=400"
          VF="$VF,drawtext=fontfile=${FONT}:textfile=t3.txt:reload=1:text_shaping=1:fontsize=28:fontcolor=white:box=1:boxcolor=0x000000AA:boxborderw=10:x=(w-text_w)/2:y=1520"
          VF="$VF,drawtext=fontfile=${FONT}:textfile=t4.txt:reload=1:text_shaping=1:fontsize=24:fontcolor=white:box=1:boxcolor=0x000000AA:boxborderw=8:x=(w-text_w)/2:y=1700"
          ffmpeg -y -loop 1 -i "$IMAGE_PATH" -frames:v 1 -filter:v "$VF" cover.png
          mv cover.png "$OUTDIR/cover.png"

      - name: Construir prompt y textos IG/X
        uses: actions/github-script@v7
        env:
          OUTDIR: ${{ env.OUTDIR }}
          PROMPT_TEMPLATE_FILE: ${{ env.PROMPT_TEMPLATE_FILE }}
          AUTO_TITLE_ES: ${{ env.AUTO_TITLE_ES }}
          AUTO_SOURCE: ${{ env.AUTO_SOURCE }}
          AUTO_DATE: ${{ env.AUTO_DATE }}
          AUTO_URL: ${{ env.AUTO_URL }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const outdir = process.env.OUTDIR;

            // Prompt (mantener tal cual si no hay plantilla)
            const tplFile = process.env.PROMPT_TEMPLATE_FILE;
            let template;
            if (tplFile && fs.existsSync(tplFile)) {
              template = fs.readFileSync(tplFile, 'utf8');
            } else {
              template =
                'Ilustraci√≥n cient√≠fica minimalista y moderna sobre: "{{title_es}}".\n' +
                'Estilo: vector flat, accesible, alto contraste; sin texto ni logos.\n' +
                'Contexto (no dibujar texto): Fuente {{source}} ¬∑ Fecha {{date}} ¬∑ URL {{url}}\n';
            }
            const map = {
              '{{title_es}}': process.env.AUTO_TITLE_ES || '',
              '{{source}}': process.env.AUTO_SOURCE || '',
              '{{date}}': process.env.AUTO_DATE || '',
              '{{url}}': process.env.AUTO_URL || '',
            };
            let prompt = template;
            for (const [k,v] of Object.entries(map)) prompt = prompt.split(k).join(v);
            fs.writeFileSync(path.join(outdir, 'prompt.txt'), prompt);

            // Instagram (nuevo texto)
            const ig = [
              'üß† Nueva c√°psula de #FuturoCient√≠fico',
              '',
              `Este art√≠culo trata sobre "${process.env.AUTO_TITLE_ES}". Se exploran los aspectos clave relacionados con la ciencia actual.`,
              'üîç ¬øTe imaginabas esto?',
              '',
              'üåêhttps://futurocientifico.vercel.app/revistas',
              '#Ciencia #Educaci√≥n #Descubre #Curiosidades'
            ].join('\n');
            fs.writeFileSync(path.join(outdir, 'instagram.txt'), ig);

            // X (nuevo texto)
            const x = [
              'üß† Hoy en #FuturoCient√≠fico:',
              '',
              `¬´Este art√≠culo trata sobre "${process.env.AUTO_TITLE_ES}". Se exploran los aspectos clave relacionados con la ciencia actual.¬ª`,
              'üåêhttps://futurocientifico.vercel.app/revistas',
              '#Ciencia #Curiosidades #Educaci√≥n'
            ].join('\n');
            fs.writeFileSync(path.join(outdir, 'x.txt'), x);

      - name: Subir artefactos
        uses: actions/upload-artifact@v4
        with:
          name: tiktok-media
          path: ${{ env.OUTDIR }}/*

      - name: Commit & push media del d√≠a
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${OUTDIR}"
          git commit -m "chore: TikTok media ${TODAY} [skip ci]" || echo "No changes"
          git fetch origin main
          git pull --rebase origin main || true
          git push || (git pull --rebase origin main && git push)